== Disclaimer ==
* !!!!! ATTENTION !!!!!
  * All data on the tested device is lost! The given device becomes overwritten multiple times,
    for SSDs a secure erase is carried out also.
  !!!!!!!!!!!!!!!!!!!!!

== Requirements ==
* The following python packages are required:
  * logging
  * json
  * lxml
  * subprocess
  * datetime
  * argparse
  * copy
  * collections
  * numpy
  * matplotlib
  * os
  Under Ubuntu it is normally sufficient to install:
	$ sudo apt-get install python-argparse python-matplotlib python-lxml python-numpy
* The following software is required:
  * Fio
  * hdparm
  
== Setup ==
* TKperf checks if FIO is found with:
	$ which fio
  Please ensure that FIO is in your path and executable.
* To install FIO visit
	http://freecode.com/projects/fio
* To fetch FIO per git use:
	$ git clone git://git.kernel.dk/fio.git
* An installation howto (currently only in German):
	http://www.thomas-krenn.com/de/wiki/Fio_kompilieren

== Installation ==
* To install TKperf simply call
	$ sudo python setup.py install
* If the source is updated with git ensure to reinstall TKperf.

== Hardware Prerequisites ==
* To carry out a Secure Erase it is necessary that the SSD is NOT in the
  frozen state (http://www.thomas-krenn.com/en/wiki/SSD_Secure_Erase#Step_1:_NOT_Frozen).
  If the SSD is frozen un- and replug the device while the host is on.

== Running a test ==
* The main script file is called tkperf:
	$ which tkperf
	/usr/local/bin/tkperf
* Call tkperf with the command line options described below. To get the help output use:
	$ tkperf -h

== Log File ==
* The log file is named after the given test name (e.g. 'intel320' in the example below).
  Inspect the log from time to time to ensure that no errors occur. In the log all
  calls to FIO are stated out. Also the results from the steady rounds are written
  to the log file. If you have any doubts that the results in the pdf report are
  correct check the log what performance values Fio returned. As the log file
  contains the FIO output in terse version, read the FIO HOWTO to find out how
  to interpret it.
  If a report is generated from the xml file a seperate log is created. This log
  gets '.xml' appended.

== Examples ==
* To run a test on a remote machine and ensure it is not stopped if the connection
  closes it is good practice to start the script in a screen session. See 'man screen'
  for more information. Basically it is sufficient to call 'screen', start the script
  and then detach with 'Ctrl-a d'.
* As root:
	# tkperf ssd intel320 /dev/sde -nj 2 -iod 16 -rfb -dsc intel320.dsc
* Also nohup could be used to start a test. To disable the warning that the device will be erased ('-ft', '--force-test'). Note
  that with nohup it is difficult to use sudo and redirect stdout/stderr to output files.
	# nohup tkperf ssd intel320 /dev/sde -ft -nj 2 -iod 16 -rfb 1>runTest.out 2>runTest.err &

== SSD Compression ==
* If the SSD controller uses compression use the '-rfb' switch to circumvent ensure that
  data buffers used by Fio are completely random. This option enables the 'refill_buffers'
  from Fio.

== Description File ==
* If 'hdparm -I' does not provide any valuable information about a drive, you have to provide a
  so called 'description file'. This file just contains some meta information for the pdf report
  and so it can be a simple text file describing the tested device. When calling the script
  provide the path to the description file with '-dsc PATH_TO_FILE'.
  
== Generate a PDF report ==
* To generate a pdf from the rst use rst2pdf:
	$ rst2pdf test.rst test.pdf

== Loading from XML ==
* To load an already carried out test from the generated xml file, use the '-xml' option:
	$ sudo tkperf ssd intel520 none -xml
* In this case as tested device 'none' is used, it is there just as a placeholder.
* Loading from an xml file is useful if something has changed in the plotting methods and you
  want to re-plot the results. This is mainly required during a development process or if a major
  update/bugfix has been made to tkperf.

== Further information ==
* To get more information about how the SSD tests are carried out, visit
  http://www.snia.org/tech_activities/standards/curr_standards/pts for the
  standard these tests are based on.

== Help Text ==
usage: tkperf [-h] [-v] [-d] [-q] [-nj NUMJOBS] [-iod IODEPTH] [-xml] [-rfb]
              [-dsc DESC_FILE] [-ft] [-fm FEATURE_MATRIX] [-hddt {iops,tp}]
              [-ssdt {iops,lat,tp,writesat}]
              {hdd,ssd} testname device

positional arguments:
  {hdd,ssd}             specify the test mode for the device
  testname              name of the fio job, corresponds to the result output
                        file
  device                device to run fio test on

optional arguments:
  -h, --help            show this help message and exit
  -v, --version         get the version information
  -d, --debug           get detailed debug information
  -q, --quiet           turn off logging of info messages
  -nj NUMJOBS, --numjobs NUMJOBS
                        specify number of jobs for fio
  -iod IODEPTH, --iodepth IODEPTH
                        specify iodepth for libaio used by fio
  -xml, --fromxml       don't run tests but load test objects from xml file
  -rfb, --refill_buffers
                        use Fio's refill buffers option to circumvent any
                        compression of devices
  -dsc DESC_FILE, --desc_file DESC_FILE
                        use a description file for the tested device if hdparm
                        doesn't work correctly
  -ft, --force_test     skip checks if the used device is mounted, don't print
                        warnings and force starting the test
  -fm FEATURE_MATRIX, --feature_matrix FEATURE_MATRIX
                        add a feature matrix of the given device to the report
  -hddt {iops,tp}, --hdd_type {iops,tp}
                        choose which tests are run
  -ssdt {iops,lat,tp,writesat}, --ssd_type {iops,lat,tp,writesat}
                        choose which tests are run
