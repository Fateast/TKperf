#!/usr/bin/env python
'''
Created on 27.06.2012

@author: gschoenb
@version: 1.1
'''
import argparse
import logging
import sys

from fio.FioJob import FioJob
from perfTest.DeviceTest import DeviceTest
from perfTest.PerfTest import SsdPerfTest
from perfTest.PerfTest import HddPerfTest
import perfTest.PerfTest as pT

if __name__ == '__main__':
    vTest = FioJob()
    fioVersion = vTest.__str__()#Fetch the fio version
    tkPerfVersion = "TKperf Version: " + pT.__version__
    tkPerfVersion += " using " + fioVersion
    parser = argparse.ArgumentParser()

    parser.add_argument("mode", help="specify the test mode for the device", choices=["hdd","ssd"])
    parser.add_argument("xmls", help="XML files to read from", type=str, nargs='+')
 
    parser.add_argument("-v","--version", help="get the version information", action='version',version=tkPerfVersion)
    parser.add_argument("-d","--debug", help="get detailed debug information",action ='store_true')
    parser.add_argument("-q","--quiet", help="turn off logging of info messages",action ='store_true')
  
    
    args = parser.parse_args()
    if args.debug == True:
        logging.basicConfig(filename='tkperf-cmp.log',level=logging.DEBUG)
    if args.quiet == True:
        logging.basicConfig(filename='tkperf-cmp.log',level=logging.WARNING)
    else:
        logging.basicConfig(filename='tkperf-cmp.log',level=logging.INFO)

    #check iodepth and number of jobs are not used in compare mode
    nj = 1
    iod = 1

    #strip the filename suffix
    for i,file in enumerate(args.xmls):
        if file.endswith('.xml'):
            file = file[:-4]
        args.xmls[i] = file

    toCompare = []
    for file in args.xmls:
        if args.mode == "ssd":
            myTest = SsdPerfTest(file, 'none', nj, iod)
        if args.mode == "hdd":
            myTest = HddPerfTest(file, 'none', nj, iod)
        myTest.fromXml()
        toCompare.append(myTest)
        
    exit(0)
#         
#         
#         
#     # In xml mode only load objects, don't run tests
#     if args.fromxml == True:
#         print "Loading from xml file..."
#         if args.mode == "ssd":
#             
#             myTest = SsdPerfTest(args.testname, args.device,nj, iod)
#         if args.mode == "hdd":
#             myTest = HddPerfTest(args.testname, args.device,nj, iod)
#         myTest.fromXml()
#         exit(0)
#         
#     if args.mode == "hdd":
#         print "Starting HDD mode..."
#         #modify the test types if available
#         if args.hddt != None:
#             HddPerfTest.testKeys = args.hddt
#         myTest = HddPerfTest(args.testnam    e,args.device,nj,iod)
#         myTest.readCmdLineArgs(sys.argv)
#         #hdparm -I should work for HDDs
#         if args.desc_file != None:
#             myTest.readDevInfoFile(args.desc_file)
#         else:
#             myTest.readDevInfoHdparm()
#         if args.feature_matrix != None:
#             myTest.readFeatureMatrix(args.feature_matrix)
#         print myTest.getDevInfo()
#         myTest.run()
#         
#     if args.mode == "ssd":
#         print "Starting SSD mode..."
#         #modify the test types if available
#         if args.ssdt != None:
#             SsdPerfTest.testKeys = args.ssdt
#         myTest = SsdPerfTest(args.testname, args.device, nj, iod)
#         myTest.readCmdLineArgs(sys.argv)
#         if args.refill_buffers == True:
#             myTest.addSglArgToTests('refill_buffers')
#         if myTest.readDevInfoHdparm() != True:
#             if args.desc_file == None:
#                 print "### Error! ###"
#                 print "Please use a description file for the current device."
#                 print "The information via hdparm -I is not reliable."
#                 print "Use -dsc DESC_FILE to provide the information"
#                 exit(0)
#             else:
#                 myTest.readDevInfoFile(args.desc_file)
#         #add an extra feature matrix to the performance test
#         if args.feature_matrix != None:
#             myTest.readFeatureMatrix(args.feature_matrix)
#         print myTest.getDevInfo()
#         myTest.run()
